"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var n=require("vue");const a=(...n)=>Object.prototype.toString.call(...n).slice(8,-1);var e={props:{data:{required:!0,validator:n=>"Undefined"===a(n)},name:{required:!0,type:String}},template:'\n    <span class="undefined">\n      <span class="key">{{ name }}</span>\n      <span v-if="name !== \'\'" class="separator">:&nbsp;</span>\n      <span class="value">undefined</span>\n    </span>\n  '.trim()},p={props:{data:{required:!0,validator:n=>"Null"===a(n)},name:{required:!0,type:String}},template:'\n    <span class="null">\n      <span class="key">{{ name }}</span>\n      <span v-if="name !== \'\'" class="separator">:&nbsp;</span>\n      <span class="value">null</span>\n    </span>\n  '.trim()},t={props:{data:{required:!0,validator:n=>"Boolean"===a(n)},name:{required:!0,type:String}},template:'\n    <span class="boolean">\n      <span class="key">{{ name }}</span>\n      <span v-if="name !== \'\'" class="separator">:&nbsp;</span>\n      <span class="value">{{ data }}</span>\n    </span>\n  '.trim()},r={props:{data:{required:!0,validator:n=>"Number"===a(n)},name:{required:!0,type:String}},template:'\n    <span class="number">\n      <span class="key">{{ name }}</span>\n      <span v-if="name !== \'\'" class="separator">:&nbsp;</span>\n      <span class="value">{{ data }}</span>\n    </span>\n  '.trim()},s={props:{data:{required:!0,validator:n=>"String"===a(n)},name:{required:!0,type:String}},template:'\n    <span class="string">\n      <span class="key">{{ name }}</span>\n      <span v-if="name !== \'\'" class="separator">:&nbsp;</span>\n      <span class="quotes">"</span>\n      <span class="value">{{ data }}</span>\n      <span class="quotes">"</span>\n    </span>\n  '.trim()};function d(a={collapseSignal:collapseSignal,expandSignal:expandSignal}){const e=n.ref(!1),p=n.ref(!1),t=n=>{e.value=!1,p.value=!p.value};n.watch(()=>a.collapseSignal,t);const r=n.ref(!1),s=()=>{e.value=!0,r.value=!r.value};n.watch(()=>a.expandSignal,s);return n.watch(()=>a.data,()=>{const[n,p]=a.expandOnCreatedAndUpdated(a.path);n?p?s():e.value=!0:p?s():e.value=!1},{immediate:!0}),{isExpanding:e,innerCollapseSignal:p,innerExpandSignal:r,handleClick:n=>{!0===n.metaKey&&!0===n.shiftKey?t():!0===n.metaKey?s():e.value=!e.value}}}var l={name:"array-wrapper",props:{path:{required:!0,validator:n=>"Array"===a(n)&&n.every(n=>"String"===a(n)||"Number"===a(n))},data:{required:!0,validator:n=>"Array"===a(n)},name:{required:!0,type:String},collapseSignal:{default:!1,type:Boolean},expandSignal:{default:!1,type:Boolean},expandOnCreatedAndUpdated:{required:!0,type:Function},getKeys:{required:!0,type:Function}},setup(a){const{isExpanding:e,innerExpandSignal:p,innerCollapseSignal:t,handleClick:r}=d(a);return{keys:n.computed(()=>a.getKeys(a.data,a.path)),isExpanding:e,innerExpandSignal:p,innerCollapseSignal:t,handleClick:r}},components:{},template:'\n    <span class="array">\n      <span\n        class="indicator"\n        @click="handleClick"\n      >{{ isExpanding ? \'▼\' : \'▶\' }}</span>\n      <span\n        class="key"\n        @click="handleClick"\n      >{{ name === \'\' ? \'\' : name }}</span>\n      <span\n        class="separator"\n        @click="handleClick"\n      >{{ name === \'\' ? \'\' : \': \' }}</span>\n      <span\n        class="count"\n        @click="handleClick"\n      >\n        {{ isExpanding === false && data.length >= 2 ? \'(\' + data.length + \')\' : \'\' }}\n      </span>\n      <span\n        class="preview"\n        @click="handleClick"\n      >\n        {{ isExpanding ? \'Array(\' + data.length + \')\' : \'[...]\' }}\n      </span>\n\n      <span v-show="isExpanding" class="value">\n        <template\n          v-for="key of keys"\n        >\n          <wrapper\n            :name="key"\n            :path="path.concat(key)"\n            :data="data[key]"\n            :expand-signal="innerExpandSignal"\n            :collapse-signal="innerCollapseSignal"\n            :expandOnCreatedAndUpdated="expandOnCreatedAndUpdated"\n            :getKeys="getKeys"\n          ></wrapper>\n        </template>\n      </span>\n    </span>\n  '},i={name:"object-wrapper",props:{path:{required:!0,validator:n=>"Array"===a(n)&&n.every(n=>"String"===a(n)||"Number"===a(n))},data:{required:!0,validator:n=>"Object"===a(n)},name:{required:!0,type:String},collapseSignal:{default:!1,type:Boolean},expandSignal:{default:!1,type:Boolean},expandOnCreatedAndUpdated:{required:!0,type:Function},getKeys:{required:!0,type:Function}},setup(a){const{isExpanding:e,innerExpandSignal:p,innerCollapseSignal:t,handleClick:r}=d(a);return{keys:n.computed(()=>a.getKeys(a.data,a.path)),isExpanding:e,innerExpandSignal:p,innerCollapseSignal:t,handleClick:r}},components:{},template:'\n    <span class="object">\n      <span\n        class="indicator"\n        @click="handleClick"\n      >{{ isExpanding ? \'▼\' : \'▶\' }}</span>\n      <span\n        class="key"\n        @click="handleClick"\n      >{{ name === \'\' ? \'\' : name }}</span>\n      <span\n        class="separator"\n        @click="handleClick"\n      >\n        {{ name === \'\' ? \'\' : \': \' }}\n      </span>\n      <span\n        class="preview"\n        @click="handleClick"\n      >\n        {{ isExpanding ? \'\' : \'{...}\' }}\n      </span>\n\n      <span v-show="isExpanding" class="value">\n        <template\n          v-for="key of keys"\n        >\n          <wrapper\n            class="value"\n            :name="key"\n            :path="path.concat(key)"\n            :data="data[key]"\n            :expand-signal="innerExpandSignal"\n            :collapse-signal="innerCollapseSignal"\n            :expandOnCreatedAndUpdated="expandOnCreatedAndUpdated"\n            :getKeys="getKeys"\n          ></wrapper>\n        </template>\n      </span>\n    </span>\n  '};const o={name:"wrapper",props:{path:{required:!0,validator:n=>"Array"===a(n)&&n.every(n=>"String"===a(n)||"Number"===a(n))},data:{required:!0},name:{required:!0,type:String},collapseSignal:{default:!1,type:Boolean},expandSignal:{default:!1,type:Boolean},expandOnCreatedAndUpdated:{required:!0,type:Function},getKeys:{required:!0,type:Function}},setup:()=>({toString:a}),components:{UndefinedWrapper:e,NullWrapper:p,BooleanWrapper:t,NumberWrapper:r,StringWrapper:s,ArrayWrapper:l,ObjectWrapper:i},template:'\n    <undefined-wrapper\n      v-if="toString(data) === \'Undefined\'"\n      :name="name"\n      :data="data"\n    ></undefined-wrapper>\n\n    <null-wrapper\n      v-else-if="toString(data) === \'Null\'"\n      :name="name"\n      :data="data"\n    ></null-wrapper>\n\n    <boolean-wrapper\n      v-else-if="toString(data) === \'Boolean\'"\n      :name="name"\n      :data="data"\n    ></boolean-wrapper>\n\n    <number-wrapper\n      v-else-if="toString(data) === \'Number\'"\n      :name="name"\n      :data="data"\n    ></number-wrapper>\n\n    <string-wrapper\n      v-else-if="toString(data) === \'String\'"\n      :name="name"\n      :data="data"\n    ></string-wrapper>\n\n    <array-wrapper\n      v-else-if="toString(data) === \'Array\'"\n      :name="name"\n      :path="path"\n      :data="data"\n      :collapse-signal="collapseSignal"\n      :expand-signal="expandSignal"\n      :expandOnCreatedAndUpdated="expandOnCreatedAndUpdated"\n      :getKeys="getKeys"\n    ></array-wrapper>\n\n    <object-wrapper\n      v-else-if="toString(data) === \'Object\'"\n      :name="name"\n      :path="path"\n      :data="data"\n      :collapse-signal="collapseSignal"\n      :expand-signal="expandSignal"\n      :expandOnCreatedAndUpdated="expandOnCreatedAndUpdated"\n      :getKeys="getKeys"\n    ></object-wrapper>\n  '};l.components.Wrapper=o,i.components.Wrapper=o;const c=Object.freeze({expandOnCreatedAndUpdated:n=>[!1,!1],getKeys:(n,a)=>Object.keys(n)});Object.defineProperty(exports,"reactive",{enumerable:!0,get:function(){return n.reactive}}),exports.mount=(a,e,p={})=>{void 0===p.rootName&&(p.rootName=""),void 0===p.getKeys&&(p.getKeys=c.getKeys),void 0===p.expandOnCreatedAndUpdated&&(p.expandOnCreatedAndUpdated=c.expandOnCreatedAndUpdated),e.classList.add("object-visualizer"),n.render(null,e),n.createApp(o,{data:a,name:p.rootName,path:[],expandOnCreatedAndUpdated:p.expandOnCreatedAndUpdated,getKeys:p.getKeys}).mount(e)};
