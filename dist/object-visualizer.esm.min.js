import{ref as n,watch as a,computed as e,render as p,createApp as t}from"vue";export{reactive}from"vue";const r=(...n)=>Object.prototype.toString.call(...n).slice(8,-1);var s={props:{data:{required:!0,validator:n=>"Undefined"===r(n)},name:{required:!0,type:String}},template:'\n    <span class="undefined">\n      <span class="key">{{ name }}</span>\n      <span v-if="name !== \'\'" class="separator">:&nbsp;</span>\n      <span class="value">undefined</span>\n    </span>\n  '.trim()},d={props:{data:{required:!0,validator:n=>"Null"===r(n)},name:{required:!0,type:String}},template:'\n    <span class="null">\n      <span class="key">{{ name }}</span>\n      <span v-if="name !== \'\'" class="separator">:&nbsp;</span>\n      <span class="value">null</span>\n    </span>\n  '.trim()},l={props:{data:{required:!0,validator:n=>"Boolean"===r(n)},name:{required:!0,type:String}},template:'\n    <span class="boolean">\n      <span class="key">{{ name }}</span>\n      <span v-if="name !== \'\'" class="separator">:&nbsp;</span>\n      <span class="value">{{ data }}</span>\n    </span>\n  '.trim()},i={props:{data:{required:!0,validator:n=>"Number"===r(n)},name:{required:!0,type:String}},template:'\n    <span class="number">\n      <span class="key">{{ name }}</span>\n      <span v-if="name !== \'\'" class="separator">:&nbsp;</span>\n      <span class="value">{{ data }}</span>\n    </span>\n  '.trim()},o={props:{data:{required:!0,validator:n=>"String"===r(n)},name:{required:!0,type:String}},template:'\n    <span class="string">\n      <span class="key">{{ name }}</span>\n      <span v-if="name !== \'\'" class="separator">:&nbsp;</span>\n      <span class="quotes">"</span>\n      <span class="value">{{ data }}</span>\n      <span class="quotes">"</span>\n    </span>\n  '.trim()};function c(e={collapseSignal:collapseSignal,expandSignal:expandSignal}){const p=n(!1),t=n(!1),r=n=>{p.value=!1,t.value=!t.value};a(()=>e.collapseSignal,r);const s=n(!1),d=()=>{p.value=!0,s.value=!s.value};a(()=>e.expandSignal,d);return a(()=>e.data,()=>{const[n,a]=e.expandOnCreatedAndUpdated(e.path);n?a?d():p.value=!0:a?d():p.value=!1},{immediate:!0}),{isExpanding:p,innerCollapseSignal:t,innerExpandSignal:s,handleClick:n=>{!0===n.metaKey&&!0===n.shiftKey?r():!0===n.metaKey?d():p.value=!p.value}}}var g={name:"array-wrapper",props:{path:{required:!0,validator:n=>"Array"===r(n)&&n.every(n=>"String"===r(n)||"Number"===r(n))},data:{required:!0,validator:n=>"Array"===r(n)},name:{required:!0,type:String},collapseSignal:{default:!1,type:Boolean},expandSignal:{default:!1,type:Boolean},expandOnCreatedAndUpdated:{required:!0,type:Function},getKeys:{required:!0,type:Function}},setup(n){const{isExpanding:a,innerExpandSignal:p,innerCollapseSignal:t,handleClick:r}=c(n);return{keys:e(()=>n.getKeys(n.data,n.path)),isExpanding:a,innerExpandSignal:p,innerCollapseSignal:t,handleClick:r}},components:{},template:'\n    <span class="array">\n      <span\n        class="indicator"\n        @click="handleClick"\n      >{{ isExpanding ? \'▼\' : \'▶\' }}</span>\n      <span\n        class="key"\n        @click="handleClick"\n      >{{ name === \'\' ? \'\' : name }}</span>\n      <span\n        class="separator"\n        @click="handleClick"\n      >{{ name === \'\' ? \'\' : \': \' }}</span>\n      <span\n        class="count"\n        @click="handleClick"\n      >\n        {{ isExpanding === false && data.length >= 2 ? \'(\' + data.length + \')\' : \'\' }}\n      </span>\n      <span\n        class="preview"\n        @click="handleClick"\n      >\n        {{ isExpanding ? \'Array(\' + data.length + \')\' : \'[...]\' }}\n      </span>\n\n      <span v-show="isExpanding" class="value">\n        <template\n          v-for="key of keys"\n        >\n          <wrapper\n            :name="key"\n            :path="path.concat(key)"\n            :data="data[key]"\n            :expand-signal="innerExpandSignal"\n            :collapse-signal="innerCollapseSignal"\n            :expandOnCreatedAndUpdated="expandOnCreatedAndUpdated"\n            :getKeys="getKeys"\n          ></wrapper>\n        </template>\n      </span>\n    </span>\n  '},u={name:"object-wrapper",props:{path:{required:!0,validator:n=>"Array"===r(n)&&n.every(n=>"String"===r(n)||"Number"===r(n))},data:{required:!0,validator:n=>"Object"===r(n)},name:{required:!0,type:String},collapseSignal:{default:!1,type:Boolean},expandSignal:{default:!1,type:Boolean},expandOnCreatedAndUpdated:{required:!0,type:Function},getKeys:{required:!0,type:Function}},setup(n){const{isExpanding:a,innerExpandSignal:p,innerCollapseSignal:t,handleClick:r}=c(n);return{keys:e(()=>n.getKeys(n.data,n.path)),isExpanding:a,innerExpandSignal:p,innerCollapseSignal:t,handleClick:r}},components:{},template:'\n    <span class="object">\n      <span\n        class="indicator"\n        @click="handleClick"\n      >{{ isExpanding ? \'▼\' : \'▶\' }}</span>\n      <span\n        class="key"\n        @click="handleClick"\n      >{{ name === \'\' ? \'\' : name }}</span>\n      <span\n        class="separator"\n        @click="handleClick"\n      >\n        {{ name === \'\' ? \'\' : \': \' }}\n      </span>\n      <span\n        class="preview"\n        @click="handleClick"\n      >\n        {{ isExpanding ? \'\' : \'{...}\' }}\n      </span>\n\n      <span v-show="isExpanding" class="value">\n        <template\n          v-for="key of keys"\n        >\n          <wrapper\n            class="value"\n            :name="key"\n            :path="path.concat(key)"\n            :data="data[key]"\n            :expand-signal="innerExpandSignal"\n            :collapse-signal="innerCollapseSignal"\n            :expandOnCreatedAndUpdated="expandOnCreatedAndUpdated"\n            :getKeys="getKeys"\n          ></wrapper>\n        </template>\n      </span>\n    </span>\n  '};const m={name:"wrapper",props:{path:{required:!0,validator:n=>"Array"===r(n)&&n.every(n=>"String"===r(n)||"Number"===r(n))},data:{required:!0},name:{required:!0,type:String},collapseSignal:{default:!1,type:Boolean},expandSignal:{default:!1,type:Boolean},expandOnCreatedAndUpdated:{required:!0,type:Function},getKeys:{required:!0,type:Function}},setup:()=>({toString:r}),components:{UndefinedWrapper:s,NullWrapper:d,BooleanWrapper:l,NumberWrapper:i,StringWrapper:o,ArrayWrapper:g,ObjectWrapper:u},template:'\n    <undefined-wrapper\n      v-if="toString(data) === \'Undefined\'"\n      :name="name"\n      :data="data"\n    ></undefined-wrapper>\n\n    <null-wrapper\n      v-else-if="toString(data) === \'Null\'"\n      :name="name"\n      :data="data"\n    ></null-wrapper>\n\n    <boolean-wrapper\n      v-else-if="toString(data) === \'Boolean\'"\n      :name="name"\n      :data="data"\n    ></boolean-wrapper>\n\n    <number-wrapper\n      v-else-if="toString(data) === \'Number\'"\n      :name="name"\n      :data="data"\n    ></number-wrapper>\n\n    <string-wrapper\n      v-else-if="toString(data) === \'String\'"\n      :name="name"\n      :data="data"\n    ></string-wrapper>\n\n    <array-wrapper\n      v-else-if="toString(data) === \'Array\'"\n      :name="name"\n      :path="path"\n      :data="data"\n      :collapse-signal="collapseSignal"\n      :expand-signal="expandSignal"\n      :expandOnCreatedAndUpdated="expandOnCreatedAndUpdated"\n      :getKeys="getKeys"\n    ></array-wrapper>\n\n    <object-wrapper\n      v-else-if="toString(data) === \'Object\'"\n      :name="name"\n      :path="path"\n      :data="data"\n      :collapse-signal="collapseSignal"\n      :expand-signal="expandSignal"\n      :expandOnCreatedAndUpdated="expandOnCreatedAndUpdated"\n      :getKeys="getKeys"\n    ></object-wrapper>\n  '};g.components.Wrapper=m,u.components.Wrapper=m;const y=Object.freeze({expandOnCreatedAndUpdated:n=>[!1,!1],getKeys:(n,a)=>Object.keys(n)});var v=(n,a,e={})=>{void 0===e.rootName&&(e.rootName=""),void 0===e.getKeys&&(e.getKeys=y.getKeys),void 0===e.expandOnCreatedAndUpdated&&(e.expandOnCreatedAndUpdated=y.expandOnCreatedAndUpdated),a.classList.add("object-visualizer"),p(null,a),t(m,{data:n,name:e.rootName,path:[],expandOnCreatedAndUpdated:e.expandOnCreatedAndUpdated,getKeys:e.getKeys}).mount(a)};export{v as mount};
